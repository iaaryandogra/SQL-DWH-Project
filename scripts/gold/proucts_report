 CREATE VIEW gold.report_products AS 
 WITH base_query AS 
(SELECT 
f.order_number , 
f.order_date, 
f.customer_key,
f.sales_amount,
f.quantity ,
p.product_key , 
p.product_name ,
p.category,
p.subcategory ,
p.cost 
FROM gold.facts_sales f
LEFT JOIN gold.dim_products p
	ON f.product_key = p.product_key
    WHERE order_date IS NOT NULL -- ONLY CONSIDER VALID SALES 
    ),
    product_aggregation AS (
	SELECT 
    product_key,
    product_name,
    category,
    subcategory,
    cost,
	TIMESTAMPDIFF(MONTH, MIN(order_date), MAX(order_date)) AS lifespan,
	MAX(order_date) AS last_sale_date ,
    COUNT(DISTINCT order_number) AS total_order,
    COUNT(DISTINCT customer_key) AS total_customers,
    SUM(sales_amount) AS total_sales,
    SUM(quantity) AS total_quantity ,
    ROUND(AVG(CAST(sales_amount AS FLOAT) / NULLIF(quantity,0 )),1)  AS avg_selling_price 
    FROM base_query
    GROUP BY
	product_key,
    product_name,
    category,
    subcategory,
    cost
    )
    SELECT 
    product_key,
    product_name,
    category,
    subcategory,
    cost , 
    last_sale_date,
	TIMESTAMPDIFF(MONTH, last_sale_date, CURDATE()) AS recency_months ,
    CASE 
		WHEN total_sales > 50000 THEN 'HIGH-PERFORMANCE '
        WHEN total_sales >= 10000 THEN 'MIDRANGE' 
        ELSE 'LOW-PERFORMER'
	END AS product_segment,
    lifespan,
    total_order,
    total_sales,
    total_quantity,
    total_customers ,
    avg_selling_price ,
    -- AVG ORDER REVENUE 
    CASE 
		WHEN total_order =0 THEN ' 0 '
        ELSE total_sales/total_order
	END AS avg_order_revenue ,
    -- average monthly revenue 
    CASE WHEN lifespan= 0 THEN total_sales
	 ELSE total_sales / lifespan
END AS avg_monthly_revenue 
 FROM product_aggregation;
