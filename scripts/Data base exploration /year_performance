-- ANALYZE THE YEARLY PERFORMANCE OF PRODUCTS BY COMPARING THEIR SALES TO BOTH THE AVERAGE SALES PERFORMANCE
-- OF THE PRODUCT AND THE PREVIOUS YEAR SALES 
WITH yearly_product_sales AS
(
SELECT 
YEAR(f.order_date) AS order_year ,
p.product_name ,
SUM(f.sales_amount) AS current_sales
FROM gold.facts_sales f
LEFT JOIN gold.dim_products p
ON f.product_key= p.product_key
WHERE order_date IS NOT NULL
GROUP BY YEAR(f.order_date) , p.product_name
)
SELECT 
order_year,
product_name ,
current_sales,
AVG(current_sales)OVER (partition by product_name) AS avg_sales ,
current_sales - AVG(current_sales)OVER (partition by product_name) AS diff_avg,

CASE
	 WHEN current_sales - AVG(current_sales)OVER (PARTITION BY product_name)  > 0  THEN 'above avg'
	 WHEN current_sales - AVG(current_sales)OVER (PARTITION BY product_name)  < 0  THEN 'below avg'
ELSE 'avg'
END AS avg_change      ,
LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) py_sales,
current_sales - LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year) AS diff_py,
CASE
	 WHEN current_sales -  LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year)  > 0  THEN 'INC'
	 WHEN current_sales - LAG(current_sales) OVER (PARTITION BY product_name ORDER BY order_year)  < 0  THEN 'DEC'
ELSE 'NO CHANGE'
END AS PY_change      
FROM yearly_product_sales
ORDER BY order_year,product_name
