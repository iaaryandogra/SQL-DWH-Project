-- ======================================
-- 🔍 DATA QUALITY CHECKS & PROFILING
-- ======================================

-- 🚨 Check for duplicate or NULL customer IDs
SELECT cst_id, COUNT(*)
FROM bronze.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

-- ➕ Flag latest record per customer using row_number
SELECT *, 
  ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze.crm_cust_info;

-- 🧼 Check for unwanted spaces in names
SELECT cst_firstname FROM bronze.crm_cust_info
WHERE cst_firstname != TRIM(cst_firstname);

SELECT cst_lastname FROM bronze.crm_cust_info
WHERE cst_lastname != TRIM(cst_lastname);

-- 🚻 Check for gender consistency
SELECT DISTINCT cst_gndr FROM bronze.crm_cust_info;

-- 🚨 Check for duplicate or NULL product IDs
SELECT prd_id, COUNT(*) 
FROM bronze.crm_prd_info 
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL;

-- 🧼 Check for extra spaces in product key/name
SELECT prd_key FROM bronze.crm_prd_info
WHERE prd_key != TRIM(prd_key);

SELECT prd_nm FROM bronze.crm_prd_info
WHERE prd_nm != TRIM(prd_nm);

-- 📉 Check for NULL or negative product costs
SELECT 
  COUNT(*) AS total_rows,
  SUM(CASE WHEN prd_cost IS NULL THEN 1 ELSE 0 END) AS null_costs,
  SUM(CASE WHEN prd_cost < 0 THEN 1 ELSE 0 END) AS negative_costs
FROM bronze.crm_prd_info;

-- 📅 Check for invalid order dates in silver (already cleaned table)
SELECT NULLIF(sls_order_dt, 0) AS sls_order_dt
FROM silver.crm_sales_details
WHERE sls_order_dt <= 0 OR LENGTH(sls_order_dt) != 8 OR sls_order_dt > 20500101;

-- 📦 Check for invalid ship dates in bronze
SELECT NULLIF(sls_ship_dt, 0) AS sls_ship_dt
FROM bronze.crm_sales_details
WHERE sls_ship_dt <= 0 OR LENGTH(sls_ship_dt) != 8 OR sls_ship_dt > 20500101;

-- 🧼 Check for spaces in order numbers
SELECT sls_ord_num FROM bronze.crm_sales_details
WHERE sls_ord_num != TRIM(sls_ord_num);

-- 🕒 Check for inconsistent date logic (order > ship/due)
SELECT * FROM bronze.crm_sales_details
WHERE sls_order_dt > sls_ship_dt OR sls_order_dt > sls_due_dt;

-- 💰 Check consistency: sls_sales = sls_price * sls_quantity
-- Select unique rows with corrected sales and price values
SELECT DISTINCT
  sls_sales AS old_sls_sales,         -- Original sales value (may be invalid)
  sls_quantity,                       -- Quantity of items sold
  sls_price AS old_sls_price,         -- Original price per item (may be null or negative)

  -- Correct the sales value if:
  -- - sls_sales is NULL or ≤ 0
  -- - sls_sales doesn't match sls_price × sls_quantity
  -- Otherwise, keep the original value
  CASE 
    WHEN sls_sales IS NULL 
         OR sls_sales <= 0 
         OR sls_sales != ABS(IFNULL(sls_price, 0)) * IFNULL(sls_quantity, 0)
    THEN ABS(IFNULL(sls_price, 0)) * IFNULL(sls_quantity, 0)  -- Recalculate sales
    ELSE sls_sales
  END AS corrected_sales,

  -- Correct the price value if:
  -- - sls_price is NULL or ≤ 0
  -- Then calculate it as sls_sales / sls_quantity
  -- NULLIF prevents division by 0
  CASE 
    WHEN sls_price IS NULL OR sls_price <= 0
    THEN sls_sales / NULLIF(sls_quantity, 0)
    ELSE sls_price
  END AS corrected_price

FROM bronze.crm_sales_details;  -- From raw sales data table

-- IDENTIFY OUT OF RANGE DATES
SELECT 
bdate 
FROM silver.erp_cust_az12
WHERE bdate< 1924-01-01 OR bdate> current_timestamp();

SELECT DISTINCT(gen)
From silver.erp_cust_az12;
-- DATA STANDARDIZATION 
SELECT DISTINCT cntry
FROM bronze.erp_loca_101;
-- CHECK FOR UNWANTED SPACES 
SELECT * FROM bronze.erp_px_cat_g1v2
 WHERE maintenance  != TRIM(maintenance);
